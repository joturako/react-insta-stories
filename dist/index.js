!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define("Stories",["React"],t):"object"==typeof exports?exports.Stories=t(require("react")):e.Stories=t(e.React)}(this,(function(e){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(t,n){t.exports=e},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(0)).default.createContext({stories:[],defaultInterval:4e3,width:360,height:640});t.default=o},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(0));t.default=o.default.createContext({currentId:0,videoDuration:0,bufferAction:!1,pause:!1,next:function(){}})},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=a(n(0)),l=u(n(4)),s=u(n(1)),f=function(e){c.useEffect((function(){e.stories.forEach((function(e,t){var n=[],o="object"!==r(e)||!e.url||"image"!==e.type&&e.type?"string"==typeof e?e:null:e.url;o&&(n[t]=new Image,n[t].src=o)}))}),[e.stories]);var t={stories:e.stories.map((function(e){return"string"==typeof e?{url:e}:e})),width:e.width,height:e.height,loader:e.loader,header:e.header,storyStyles:e.storyStyles,loop:e.loop,defaultInterval:e.defaultInterval,isPaused:e.isPaused,currentIndex:e.currentIndex,onStoryStart:e.onStoryStart,onStoryEnd:e.onStoryEnd,onAllStoriesEnd:e.onAllStoriesEnd};return c.default.createElement(s.default.Provider,{value:t},c.default.createElement(l.default,null))};f.defaultProps={width:360,height:640,defaultInterval:4e3},t.default=f},function(e,t,n){"use strict";function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&i(t,e,n);return a(t,e),t},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=u(n(0)),s=c(n(1)),f=c(n(2)),d=c(n(5)),p=c(n(12));t.default=function(){var e=r(l.useState(0),2),t=e[0],n=e[1],o=r(l.useState(!0),2),i=o[0],a=o[1],u=r(l.useState(!0),2),c=u[0],h=u[1],m=r(l.useState(0),2),b=m[0],v=m[1],g=l.useRef(),_=l.useContext(s.default),j=_.width,x=_.height,S=_.stories,w=_.loop,O=_.currentIndex,M=_.isPaused;l.useEffect((function(){"number"==typeof O&&(O>=0&&O<S.length?n(O):console.error("Index out of bounds. Current index was set to value more than the length of stories array.",O))}),[O]),l.useEffect((function(){"boolean"==typeof M&&a(M)}),[M]);var E=function(e,t){a("pause"===e),h(!!t)},I=function(){w?P():C()},P=function(){n((function(e){return(e+1)%S.length}))},C=function(){n((function(e){return e<S.length-1?e+1:e}))},A=function(e){e.preventDefault(),g.current=setTimeout((function(){E("pause")}),200)},k=function(e,t){e.preventDefault(),g.current&&clearTimeout(g.current),i?E("play"):"next"===t?I():n((function(e){return e>0?e-1:e}))};return l.default.createElement("div",{style:Object.assign(Object.assign({},y.container),{width:j,height:x})},l.default.createElement(f.default.Provider,{value:{bufferAction:c,videoDuration:b,currentId:t,pause:i,next:I}},l.default.createElement(p.default,null)),l.default.createElement(d.default,{action:E,bufferAction:c,playState:i,story:S[t],getVideoDuration:function(e){v(1e3*e)}}),l.default.createElement("div",{style:y.overlay},l.default.createElement("div",{style:{width:"50%",zIndex:999},onTouchStart:A,onTouchEnd:function(e){return k(e,"previous")},onMouseDown:A,onMouseUp:function(e){return k(e,"previous")}}),l.default.createElement("div",{style:{width:"50%",zIndex:999},onTouchStart:A,onTouchEnd:function(e){return k(e,"next")},onMouseDown:A,onMouseUp:function(e){return k(e,"next")}})))};var y={container:{display:"flex",flexDirection:"column",background:"#111",position:"relative"},overlay:{position:"absolute",height:"inherit",width:"inherit",display:"flex"}}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var a=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),u=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),c=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&a(t,e,n);return u(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=c(n(0)),f=l(n(6)),d=l(n(7)),p=l(n(8)),y=l(n(1)),h={story:{display:"flex",position:"relative",overflow:"hidden"},storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"}};t.default=function(e){var t=o(s.useState(!1),2),n=t[0],i=t[1],a=o(s.useState(!1),2),u=a[0],c=a[1],l=s.useContext(y.default),m=l.width,b=l.height,v=l.loader,g=l.header,_=l.storyStyles;s.useEffect((function(){c(!1),"object"===r(e.story)&&e.story.content?(i(!0),e.action("play",!0)):(i(!1),e.action("pause",!0),j.current&&j.current.addEventListener("waiting",(function(){e.action("pause",!0)})),j.current&&j.current.addEventListener("playing",(function(){e.action("play",!0)})))}),[e.story]);var j=s.useRef(null);s.useEffect((function(){j.current&&(e.playState?j.current.pause():j.current.play().catch((function(e){return console.log(e)})))}),[e.playState]);var x=function(){try{i(!0),e.action("play",!0)}catch(e){console.log(e)}},S=function(){try{e.getVideoDuration(j.current.duration),j.current&&j.current.play().then((function(){x()})).catch((function(t){e.action("pause"),console.log(t)}))}catch(e){console.log(e)}},w="object"===r(e.story)&&e.story.header;return s.default.createElement("div",{style:Object.assign(Object.assign({},h.story),{width:m,height:b})},function(){var t="object"===r(e.story)&&e.story.content;if(t)return s.default.createElement(t,{action:e.action,isPaused:e.playState});var n="object"===r(e.story)?e.story.url:e.story,o="object"===r(e.story)&&e.story.styles||_||h.storyContent,i="object"===r(e.story)&&"video"===e.story.type?"video":"image";return"image"===i?s.default.createElement("img",{style:o,src:n,onLoad:x}):"video"===i?s.default.createElement("video",{ref:j,style:o,src:n,controls:!1,onLoadedData:S,autoPlay:!0,playsInline:!0}):null}(),w&&s.default.createElement("div",{style:{position:"absolute",left:12,top:20,zIndex:1e3,width:"calc(100% - 24px)"}},"object"===r(e.story)?g?g(e.story.header):s.default.createElement(f.default,{heading:e.story.header.heading,subheading:e.story.header.subheading,profileImage:e.story.header.profileImage}):null),!n&&s.default.createElement("div",{style:{width:m,height:b,position:"absolute",left:0,top:0,background:"rgba(0, 0, 0, 0.9)",zIndex:9,display:"flex",justifyContent:"center",alignItems:"center",color:"#ccc"}},v||s.default.createElement("div",{className:p.default.spinner})),"object"===r(e.story)&&e.story.seeMore&&s.default.createElement("div",{style:{position:"absolute",margin:"auto",bottom:u?"unset":0,zIndex:9999,width:"100%",height:u?"100%":"auto"}},s.default.createElement(d.default,{action:e.action,toggleMore:function(t){c(t),e.action(t?"pause":"play")},showContent:u,seeMoreContent:e.story.seeMore})))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(0)),i={main:{display:"flex",alignItems:"center"},img:{width:40,height:40,borderRadius:40,marginRight:10,filter:"drop-shadow(0 0px 2px rgba(0, 0, 0, 0.5))",border:"2px solid rgba(255, 255, 255, 0.8)"},text:{display:"flex",flexDirection:"column",filter:"drop-shadow(0 0px 3px rgba(0, 0, 0, 0.9))"},heading:{fontSize:"1rem",color:"rgba(255, 255, 255, 0.9)",margin:0,marginBottom:2},subheading:{fontSize:"0.6rem",color:"rgba(255, 255, 255, 0.8)",margin:0}};t.default=function(e){var t=e.profileImage,n=e.heading,r=e.subheading;return o.default.createElement("div",{style:i.main},t&&o.default.createElement("img",{style:i.img,src:t}),o.default.createElement("span",{style:i.text},o.default.createElement("p",{style:i.heading},n),o.default.createElement("p",{style:i.subheading},r)))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(0));t.default=function(e){var t=e.seeMoreContent;return e.showContent?o.default.createElement("div",{style:i.seeMoreExpanded},o.default.createElement(t,{close:function(){return e.toggleMore(!1)}})):o.default.createElement("div",{onClick:function(){e.toggleMore(!0)},style:i.seeMore},o.default.createElement("span",{style:i.seeMoreIcon},"⌃"),o.default.createElement("span",{style:i.seeMoreText},"See more"))};var i={seeMore:{height:"10vh",background:"linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.2))",display:"flex",flexDirection:"column",width:"100%",alignItems:"center",justifyContent:"flex-end",bottom:0},seeMoreExpanded:{position:"absolute",top:0,left:0,width:"100%",height:"100%",boxSizing:"border-box",zIndex:99999},seeMoreText:{color:"white",textAlign:"center",letterSpacing:"0.1em",marginBottom:"2.2vh",textTransform:"capitalize",opacity:"1",fontSize:"0.8em",transition:"opacity 300ms ease-in-out"},seeMoreIcon:{color:"white",textAlign:"center",letterSpacing:"0.2em",marginBottom:"0.4vh",opacity:"1",filter:"drop-shadow(0 0 5px black)",textTransform:"capitalize",transition:"opacity 300ms ease-in-out"},seeMoreClose:{position:"absolute",filter:"drop-shadow(0 3px 2px #ccc)",right:"0.5rem",top:"0.5rem",fontSize:"1.5rem",opacity:"0.7",padding:"1rem"}}},function(e,t,n){var r=n(9),o=n(10);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function u(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],c=t.base?i[0]+t.base:i[0],l=n[c]||0,s="".concat(c," ").concat(l);n[c]=l+1;var f=u(s),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:s,updater:m(d,t),references:1}),r.push(s)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var y=null,h=0;function m(e,t){var n,r,o;if(t.singleton){var i=h++;n=y||(y=l(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=l(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=u(n[r]);a[o].references--}for(var i=c(e,t),l=0;l<n.length;l++){var s=u(n[l]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=i}}}},function(e,t,n){(t=n(11)(!1)).push([e.i,"._1CK7FHVwhiOnuCiZJwiPq1 {\n\twidth: 40px;\n\theight: 40px;\n\tmargin: 100px auto;\n\tbackground-color: #fff;\n\n\tborder-radius: 100%;\n\t-webkit-animation: _1hEQ2VzIkTiZ-9jZoLI3JC 1s infinite ease-in-out;\n\tanimation: _1hEQ2VzIkTiZ-9jZoLI3JC 1s infinite ease-in-out;\n}\n\n@-webkit-keyframes _1hEQ2VzIkTiZ-9jZoLI3JC {\n\t0% {\n\t\t-webkit-transform: scale(0);\n\t}\n\t100% {\n\t\t-webkit-transform: scale(1);\n\t\topacity: 0;\n\t}\n}\n\n@keyframes _1hEQ2VzIkTiZ-9jZoLI3JC {\n\t0% {\n\t\t-webkit-transform: scale(0);\n\t\ttransform: scale(0);\n\t}\n\t100% {\n\t\t-webkit-transform: scale(1);\n\t\ttransform: scale(1);\n\t\topacity: 0;\n\t}\n}\n",""]),t.locals={spinner:"_1CK7FHVwhiOnuCiZJwiPq1","sk-scaleout":"_1hEQ2VzIkTiZ-9jZoLI3JC"},e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(c," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,u,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&i(t,e,n);return a(t,e),t},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=u(n(0)),s=c(n(13)),f=c(n(2)),d=c(n(1));t.default=function(){var e=r(l.useState(0),2),t=e[0],n=e[1],o=l.useContext(f.default),i=o.currentId,a=o.next,u=o.videoDuration,c=o.pause,y=l.useContext(d.default),h=y.stories,m=y.defaultInterval,b=y.onStoryEnd,v=y.onStoryStart,g=y.onAllStoriesEnd;l.useEffect((function(){n(0)}),[i,h]),l.useEffect((function(){return c||(_.current=requestAnimationFrame(x)),function(){cancelAnimationFrame(_.current)}}),[i,c]);var _=l.useRef(),j=t,x=function e(){0===j&&S(),n((function(e){var t=M();return j=e+100/(t/1e3*60),e+100/(t/1e3*60)})),j<100?_.current=requestAnimationFrame(e):(w(),i===h.length-1&&O(),cancelAnimationFrame(_.current),a())},S=function(){v&&v(i,h[i])},w=function(){b&&b(i,h[i])},O=function(){g&&g(i,h)},M=function(){return"video"===h[i].type?u:"number"==typeof h[i].duration?h[i].duration:m};return l.default.createElement("div",{style:p.progressArr},h.map((function(e,n){return l.default.createElement(s.default,{key:n,count:t,width:1/h.length,active:n===i?1:n<i?2:0})})))};var p={progressArr:{display:"flex",justifyContent:"center",maxWidth:"100%",flexWrap:"row",position:"absolute",width:"98%",padding:5,paddingTop:7,alignSelf:"center",zIndex:99,filter:"drop-shadow(0 1px 8px #222)"}}},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=i(n(0)),c=a(n(14)),l=a(n(2));t.default=function(e){var t=u.useContext(l.default),n=t.bufferAction,r=t.pause,o=e.width,i=e.active;return u.default.createElement(c.default,{width:o,pause:r,bufferAction:n},u.default.createElement("div",{style:Object.assign(Object.assign({},function(t){switch(t.active){case 2:return{width:"100%"};case 1:return{transform:"scaleX(".concat(e.count/100,")")};case 0:default:return{width:0}}}({active:i})),s.inner)}))};var s={inner:{background:"#fff",height:"100%",maxWidth:"100%",borderRadius:2,transformOrigin:"center left",WebkitBackfaceVisibility:"hidden",MozBackfaceVisibility:"hidden",msBackfaceVisibility:"hidden",backfaceVisibility:"hidden",WebkitPerspective:1e3,MozPerspective:1e3,msPerspective:1e3,perspective:1e3}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(0)),i=function(e){var t=e.width,n=e.pause,r=e.bufferAction;return{width:"".concat(100*t,"%"),opacity:n&&!r?0:1}},a={progress:{height:2,maxWidth:"100%",background:"#555",margin:2,borderRadius:2,transition:"opacity 400ms ease-in-out"}};t.default=function(e){return o.default.createElement("div",{style:Object.assign(Object.assign({},a.progress),i(e))},e.children)}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TdG9yaWVzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9TdG9yaWVzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL1N0b3JpZXMvZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcInJlYWN0XCIsXCJjb21tb25qczJcIjpcInJlYWN0XCIsXCJhbWRcIjpcIlJlYWN0XCIsXCJyb290XCI6XCJSZWFjdFwifSIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL2NvbnRleHQvR2xvYmFsLnRzeCIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL2NvbnRleHQvUHJvZ3Jlc3MudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29tcG9uZW50cy9Db250YWluZXIudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29tcG9uZW50cy9TdG9yeS50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9jb21wb25lbnRzL0hlYWRlci50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9jb21wb25lbnRzL1NlZU1vcmUudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvc3R5bGVzLmNzcz9iYmJmIiwid2VicGFjazovL1N0b3JpZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9zdHlsZXMuY3NzIiwid2VicGFjazovL1N0b3JpZXMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29tcG9uZW50cy9Qcm9ncmVzc0FycmF5LnRzeCIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL2NvbXBvbmVudHMvUHJvZ3Jlc3MudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29tcG9uZW50cy9Qcm9ncmVzc1dyYXBwZXIudHN4Il0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJ0aGlzIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkdsb2JhbENvbnRleHQiLCJjcmVhdGVDb250ZXh0Iiwic3RvcmllcyIsImRlZmF1bHRJbnRlcnZhbCIsIndpZHRoIiwiaGVpZ2h0IiwiY3VycmVudElkIiwidmlkZW9EdXJhdGlvbiIsImJ1ZmZlckFjdGlvbiIsInBhdXNlIiwibmV4dCIsIlJlYWN0SW5zdGFTdG9yaWVzIiwicHJvcHMiLCJ1c2VFZmZlY3QiLCJmb3JFYWNoIiwiaW1hZ2VzIiwidXJsIiwidHlwZSIsIkltYWdlIiwic3JjIiwiY29udGV4dCIsIm1hcCIsImxvYWRlciIsImhlYWRlciIsInN0b3J5U3R5bGVzIiwibG9vcCIsImlzUGF1c2VkIiwiY3VycmVudEluZGV4Iiwib25TdG9yeVN0YXJ0Iiwib25TdG9yeUVuZCIsIm9uQWxsU3Rvcmllc0VuZCIsIlByb3ZpZGVyIiwiZGVmYXVsdFByb3BzIiwidXNlU3RhdGUiLCJzZXRDdXJyZW50SWQiLCJzZXRQYXVzZSIsInNldEJ1ZmZlckFjdGlvbiIsInNldFZpZGVvRHVyYXRpb24iLCJtb3VzZWRvd25JZCIsInVzZVJlZiIsInVzZUNvbnRleHQiLCJsZW5ndGgiLCJjb25zb2xlIiwiZXJyb3IiLCJ0b2dnbGVTdGF0ZSIsImFjdGlvbiIsInVwZGF0ZU5leHRTdG9yeUlkRm9yTG9vcCIsInVwZGF0ZU5leHRTdG9yeUlkIiwicHJldiIsImRlYm91bmNlUGF1c2UiLCJlIiwicHJldmVudERlZmF1bHQiLCJjdXJyZW50Iiwic2V0VGltZW91dCIsIm1vdXNlVXAiLCJjbGVhclRpbWVvdXQiLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsInBsYXlTdGF0ZSIsInN0b3J5IiwiZ2V0VmlkZW9EdXJhdGlvbiIsImR1cmF0aW9uIiwib3ZlcmxheSIsInpJbmRleCIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hFbmQiLCJvbk1vdXNlRG93biIsIm9uTW91c2VVcCIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwiYmFja2dyb3VuZCIsInBvc2l0aW9uIiwib3ZlcmZsb3ciLCJzdG9yeUNvbnRlbnQiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsIm1hcmdpbiIsImxvYWRlZCIsInNldExvYWRlZCIsInNob3dNb3JlIiwic2V0U2hvd01vcmUiLCJjb250ZW50IiwidmlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBsYXkiLCJsb2ciLCJpbWFnZUxvYWRlZCIsInZpZGVvTG9hZGVkIiwidGhlbiIsImlzSGVhZGVyIiwiSW5uZXJDb250ZW50Iiwic291cmNlIiwic3RvcnlDb250ZW50U3R5bGVzIiwib25Mb2FkIiwicmVmIiwiY29udHJvbHMiLCJvbkxvYWRlZERhdGEiLCJhdXRvUGxheSIsInBsYXlzSW5saW5lIiwiZ2V0U3RvcnlDb250ZW50IiwibGVmdCIsInRvcCIsImhlYWRpbmciLCJzdWJoZWFkaW5nIiwicHJvZmlsZUltYWdlIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiY29sb3IiLCJjbGFzc05hbWUiLCJzcGlubmVyIiwic2VlTW9yZSIsImJvdHRvbSIsInRvZ2dsZU1vcmUiLCJzaG93Iiwic2hvd0NvbnRlbnQiLCJzZWVNb3JlQ29udGVudCIsIm1haW4iLCJpbWciLCJib3JkZXJSYWRpdXMiLCJtYXJnaW5SaWdodCIsImZpbHRlciIsImJvcmRlciIsInRleHQiLCJmb250U2l6ZSIsIm1hcmdpbkJvdHRvbSIsIlNlZU1vcmVDb250ZW50Iiwic2VlTW9yZUV4cGFuZGVkIiwiY2xvc2UiLCJvbkNsaWNrIiwic2VlTW9yZUljb24iLCJzZWVNb3JlVGV4dCIsImJveFNpemluZyIsInRleHRBbGlnbiIsImxldHRlclNwYWNpbmciLCJ0ZXh0VHJhbnNmb3JtIiwib3BhY2l0eSIsInRyYW5zaXRpb24iLCJzZWVNb3JlQ2xvc2UiLCJyaWdodCIsInBhZGRpbmciLCJhcGkiLCJkZWZhdWx0Iiwib3B0aW9ucyIsImxvY2FscyIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwibGlzdCIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsIml0ZW0iLCJpZCIsImJhc2UiLCJjb3VudCIsImNvbmNhdCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsInB1c2giLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsInRvU3RyaW5nIiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJzcGxpY2UiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsImJhc2U2NCIsImRhdGEiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJzZXRDb3VudCIsImFuaW1hdGlvbkZyYW1lSWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbmNyZW1lbnRDb3VudCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY291bnRDb3B5Iiwic3RvcnlTdGFydENhbGxiYWNrIiwiaW50ZXJ2YWwiLCJnZXRDdXJyZW50SW50ZXJ2YWwiLCJzdG9yeUVuZENhbGxiYWNrIiwiYWxsU3Rvcmllc0VuZENhbGxiYWNrIiwicHJvZ3Jlc3NBcnIiLCJfIiwiYWN0aXZlIiwiZmxleFdyYXAiLCJwYWRkaW5nVG9wIiwiYWxpZ25TZWxmIiwidHJhbnNmb3JtIiwiZ2V0UHJvZ3Jlc3NTdHlsZSIsImlubmVyIiwidHJhbnNmb3JtT3JpZ2luIiwiV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5IiwiTW96QmFja2ZhY2VWaXNpYmlsaXR5IiwibXNCYWNrZmFjZVZpc2liaWxpdHkiLCJiYWNrZmFjZVZpc2liaWxpdHkiLCJXZWJraXRQZXJzcGVjdGl2ZSIsIk1velBlcnNwZWN0aXZlIiwibXNQZXJzcGVjdGl2ZSIsInBlcnNwZWN0aXZlIiwiZ2V0UHJvZ3Jlc3NXcmFwcGVyU3R5bGUiLCJwcm9ncmVzcyIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsRUFBUUcsUUFBUSxVQUNSLG1CQUFYQyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sVUFBVyxDQUFDLFNBQVVKLEdBQ0gsaUJBQVpDLFFBQ2RBLFFBQWlCLFFBQUlELEVBQVFHLFFBQVEsVUFFckNKLEVBQWMsUUFBSUMsRUFBUUQsRUFBWSxPQVJ4QyxDQVNHTyxNQUFNLFNBQVNDLEdBQ2xCLE8sWUNURSxJQUFJQyxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVVCxRQUduQyxJQUFJQyxFQUFTTSxFQUFpQkUsR0FBWSxDQUN6Q0MsRUFBR0QsRUFDSEUsR0FBRyxFQUNIWCxRQUFTLElBVVYsT0FOQVksRUFBUUgsR0FBVUksS0FBS1osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU1EsR0FHL0RQLEVBQU9VLEdBQUksRUFHSlYsRUFBT0QsUUEwRGYsT0FyREFRLEVBQW9CTSxFQUFJRixFQUd4QkosRUFBb0JPLEVBQUlSLEVBR3hCQyxFQUFvQlEsRUFBSSxTQUFTaEIsRUFBU2lCLEVBQU1DLEdBQzNDVixFQUFvQlcsRUFBRW5CLEVBQVNpQixJQUNsQ0csT0FBT0MsZUFBZXJCLEVBQVNpQixFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVWLEVBQW9CZ0IsRUFB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QUFPRCxFQUFqQixFQUFpQkEsYUFBakIsTUFBcUMsQ0FDakVKLE1BQU8sR0FBRixPQUFhLElBQVJBLEVBQUwsS0FDTG9JLFFBQVMvSCxJQUFVRCxFQUFlLEVBQUksSUFHcENpRCxFQUFTLENBQ1htTixTQUFVLENBQ052USxPQUFRLEVBQ1JzRSxTQUFVLE9BQ1ZKLFdBQVksT0FDWk0sT0FBUSxFQUNSMEMsYUFBYyxFQUNka0IsV0FBWSw4QkFJcEIsVUF0QndCLFNBQUM3SCxHQUFELE9BQ3BCLCtCQUFLNEMsTUFBSywrQkFBT0MsRUFBT21OLFVBQWFELEVBQXdCL1AsS0FDeERBLEVBQU1pUSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiU3Rvcmllc1wiLCBbXCJSZWFjdFwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJTdG9yaWVzXCJdID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlN0b3JpZXNcIl0gPSBmYWN0b3J5KHJvb3RbXCJSZWFjdFwiXSk7XG59KSh0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBHbG9iYWxDdHggfSBmcm9tICcuLi9pbnRlcmZhY2VzJ1xuXG5jb25zdCBHbG9iYWxDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxHbG9iYWxDdHg+KHtcbiAgICBzdG9yaWVzOiBbXSxcbiAgICBkZWZhdWx0SW50ZXJ2YWw6IDQwMDAsXG4gICAgd2lkdGg6IDM2MCxcbiAgICBoZWlnaHQ6IDY0MFxufSlcblxuZXhwb3J0IGRlZmF1bHQgR2xvYmFsQ29udGV4dCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFByb2dyZXNzQ29udGV4dCB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcydcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QuY3JlYXRlQ29udGV4dDxQcm9ncmVzc0NvbnRleHQ+KHtcbiAgICBjdXJyZW50SWQ6IDAsXG4gICAgdmlkZW9EdXJhdGlvbjogMCxcbiAgICBidWZmZXJBY3Rpb246IGZhbHNlLFxuICAgIHBhdXNlOiBmYWxzZSxcbiAgICBuZXh0OiAoKSA9PiB7IH1cbn0pIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgUmVhY3RJbnN0YVN0b3JpZXNQcm9wcywgR2xvYmFsQ3R4IH0gZnJvbSAnLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICcuL2NvbXBvbmVudHMvQ29udGFpbmVyJ1xuaW1wb3J0IEdsb2JhbENvbnRleHQgZnJvbSAnLi9jb250ZXh0L0dsb2JhbCdcblxuY29uc3QgUmVhY3RJbnN0YVN0b3JpZXMgPSBmdW5jdGlvbiAocHJvcHM6IFJlYWN0SW5zdGFTdG9yaWVzUHJvcHMpIHtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBwcm9wcy5zdG9yaWVzLmZvckVhY2goKHMsIGkpID0+IHtcbiAgICAgICAgICAgIGxldCBpbWFnZXMgPSBbXVxuICAgICAgICAgICAgY29uc3QgdXJsID0gdHlwZW9mIHMgPT09ICdvYmplY3QnICYmIHMudXJsICYmIChzLnR5cGUgPT09ICdpbWFnZScgfHwgIXMudHlwZSkgPyBzLnVybCA6ICh0eXBlb2YgcyA9PT0gJ3N0cmluZycgPyBzIDogbnVsbClcbiAgICAgICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICAgICAgICBpbWFnZXNbaV0gPSBuZXcgSW1hZ2UoKVxuICAgICAgICAgICAgICAgIGltYWdlc1tpXS5zcmMgPSB1cmxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9LCBbcHJvcHMuc3Rvcmllc10pXG5cbiAgICBsZXQgY29udGV4dDogR2xvYmFsQ3R4ID0ge1xuICAgICAgICBzdG9yaWVzOiBwcm9wcy5zdG9yaWVzLm1hcChzID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcyA9PT0gJ3N0cmluZycpIHJldHVybiB7IHVybDogcyB9XG4gICAgICAgICAgICBlbHNlIHJldHVybiBzXG4gICAgICAgIH0pLFxuICAgICAgICB3aWR0aDogcHJvcHMud2lkdGgsXG4gICAgICAgIGhlaWdodDogcHJvcHMuaGVpZ2h0LFxuICAgICAgICBsb2FkZXI6IHByb3BzLmxvYWRlcixcbiAgICAgICAgaGVhZGVyOiBwcm9wcy5oZWFkZXIsXG4gICAgICAgIHN0b3J5U3R5bGVzOiBwcm9wcy5zdG9yeVN0eWxlcyxcbiAgICAgICAgbG9vcDogcHJvcHMubG9vcCxcbiAgICAgICAgZGVmYXVsdEludGVydmFsOiBwcm9wcy5kZWZhdWx0SW50ZXJ2YWwsXG4gICAgICAgIGlzUGF1c2VkOiBwcm9wcy5pc1BhdXNlZCxcbiAgICAgICAgY3VycmVudEluZGV4OiBwcm9wcy5jdXJyZW50SW5kZXgsXG4gICAgICAgIG9uU3RvcnlTdGFydDogcHJvcHMub25TdG9yeVN0YXJ0LFxuICAgICAgICBvblN0b3J5RW5kOiBwcm9wcy5vblN0b3J5RW5kLFxuICAgICAgICBvbkFsbFN0b3JpZXNFbmQ6IHByb3BzLm9uQWxsU3Rvcmllc0VuZFxuICAgIH1cbiAgICByZXR1cm4gPEdsb2JhbENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHR9PlxuICAgICAgICA8Q29udGFpbmVyIC8+XG4gICAgPC9HbG9iYWxDb250ZXh0LlByb3ZpZGVyPlxufVxuXG5SZWFjdEluc3RhU3Rvcmllcy5kZWZhdWx0UHJvcHMgPSB7XG4gICAgd2lkdGg6IDM2MCxcbiAgICBoZWlnaHQ6IDY0MCxcbiAgICBkZWZhdWx0SW50ZXJ2YWw6IDQwMDBcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RJbnN0YVN0b3JpZXMiLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlU3RhdGUsIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tICcuLy4uL2NvbnRleHQvR2xvYmFsJ1xuaW1wb3J0IFByb2dyZXNzQ29udGV4dCBmcm9tICcuLy4uL2NvbnRleHQvUHJvZ3Jlc3MnXG5pbXBvcnQgU3RvcnkgZnJvbSAnLi9TdG9yeSdcbmltcG9ydCBQcm9ncmVzc0FycmF5IGZyb20gJy4vUHJvZ3Jlc3NBcnJheSdcbmltcG9ydCB7IEdsb2JhbEN0eCB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IFtjdXJyZW50SWQsIHNldEN1cnJlbnRJZF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApXG4gICAgY29uc3QgW3BhdXNlLCBzZXRQYXVzZV0gPSB1c2VTdGF0ZTxib29sZWFuPih0cnVlKVxuICAgIGNvbnN0IFtidWZmZXJBY3Rpb24sIHNldEJ1ZmZlckFjdGlvbl0gPSB1c2VTdGF0ZTxib29sZWFuPih0cnVlKVxuICAgIGNvbnN0IFt2aWRlb0R1cmF0aW9uLCBzZXRWaWRlb0R1cmF0aW9uXSA9IHVzZVN0YXRlPG51bWJlcj4oMClcblxuICAgIGxldCBtb3VzZWRvd25JZCA9IHVzZVJlZjxhbnk+KCk7XG5cbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIHN0b3JpZXMsIGxvb3AsIGN1cnJlbnRJbmRleCwgaXNQYXVzZWQgfSA9IHVzZUNvbnRleHQ8R2xvYmFsQ3R4PihHbG9iYWxDb250ZXh0KVxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgY3VycmVudEluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA+PSAwICYmIGN1cnJlbnRJbmRleCA8IHN0b3JpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudElkKGN1cnJlbnRJbmRleClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignSW5kZXggb3V0IG9mIGJvdW5kcy4gQ3VycmVudCBpbmRleCB3YXMgc2V0IHRvIHZhbHVlIG1vcmUgdGhhbiB0aGUgbGVuZ3RoIG9mIHN0b3JpZXMgYXJyYXkuJywgY3VycmVudEluZGV4KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW2N1cnJlbnRJbmRleF0pXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGlzUGF1c2VkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHNldFBhdXNlKGlzUGF1c2VkKVxuICAgICAgICB9XG4gICAgfSwgW2lzUGF1c2VkXSlcblxuICAgIGNvbnN0IHRvZ2dsZVN0YXRlID0gKGFjdGlvbjogc3RyaW5nLCBidWZmZXJBY3Rpb24/OiBib29sZWFuKSA9PiB7XG4gICAgICAgIHNldFBhdXNlKGFjdGlvbiA9PT0gJ3BhdXNlJylcbiAgICAgICAgc2V0QnVmZmVyQWN0aW9uKCEhYnVmZmVyQWN0aW9uKVxuICAgIH1cblxuICAgIGNvbnN0IHByZXZpb3VzID0gKCkgPT4ge1xuICAgICAgICBzZXRDdXJyZW50SWQocHJldiA9PiBwcmV2ID4gMCA/IHByZXYgLSAxIDogcHJldilcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0ID0gKCkgPT4ge1xuICAgICAgICBpZiAobG9vcCkge1xuICAgICAgICAgICAgdXBkYXRlTmV4dFN0b3J5SWRGb3JMb29wKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZU5leHRTdG9yeUlkKClcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCB1cGRhdGVOZXh0U3RvcnlJZEZvckxvb3AgPSAoKSA9PiB7XG4gICAgICAgIHNldEN1cnJlbnRJZChwcmV2ID0+IChwcmV2ICsgMSkgJSBzdG9yaWVzLmxlbmd0aClcbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGVOZXh0U3RvcnlJZCA9ICgpID0+IHtcbiAgICAgICAgc2V0Q3VycmVudElkKHByZXYgPT4ge1xuICAgICAgICAgICAgaWYgKHByZXYgPCBzdG9yaWVzLmxlbmd0aCAtIDEpIHJldHVybiBwcmV2ICsgMVxuICAgICAgICAgICAgcmV0dXJuIHByZXZcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBkZWJvdW5jZVBhdXNlID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQgfCBSZWFjdC5Ub3VjaEV2ZW50KSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICBtb3VzZWRvd25JZC5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0b2dnbGVTdGF0ZSgncGF1c2UnKVxuICAgICAgICB9LCAyMDApXG4gICAgfVxuXG4gICAgY29uc3QgbW91c2VVcCA9IChlOiBSZWFjdC5Nb3VzZUV2ZW50IHwgUmVhY3QuVG91Y2hFdmVudCwgdHlwZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICBtb3VzZWRvd25JZC5jdXJyZW50ICYmIGNsZWFyVGltZW91dChtb3VzZWRvd25JZC5jdXJyZW50KVxuICAgICAgICBpZiAocGF1c2UpIHtcbiAgICAgICAgICAgIHRvZ2dsZVN0YXRlKCdwbGF5JylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHR5cGUgPT09ICduZXh0JyA/IG5leHQoKSA6IHByZXZpb3VzKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGdldFZpZGVvRHVyYXRpb24gPSAoZHVyYXRpb246IG51bWJlcikgPT4ge1xuICAgICAgICBzZXRWaWRlb0R1cmF0aW9uKGR1cmF0aW9uICogMTAwMClcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IC4uLnN0eWxlcy5jb250YWluZXIsIC4uLnsgd2lkdGgsIGhlaWdodCB9IH19PlxuICAgICAgICAgICAgPFByb2dyZXNzQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e1xuICAgICAgICAgICAgICAgIGJ1ZmZlckFjdGlvbjogYnVmZmVyQWN0aW9uLFxuICAgICAgICAgICAgICAgIHZpZGVvRHVyYXRpb246IHZpZGVvRHVyYXRpb24sXG4gICAgICAgICAgICAgICAgY3VycmVudElkLFxuICAgICAgICAgICAgICAgIHBhdXNlLFxuICAgICAgICAgICAgICAgIG5leHRcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgIDxQcm9ncmVzc0FycmF5IC8+XG4gICAgICAgICAgICA8L1Byb2dyZXNzQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICAgICAgIDxTdG9yeVxuICAgICAgICAgICAgICAgIGFjdGlvbj17dG9nZ2xlU3RhdGV9XG4gICAgICAgICAgICAgICAgYnVmZmVyQWN0aW9uPXtidWZmZXJBY3Rpb259XG4gICAgICAgICAgICAgICAgcGxheVN0YXRlPXtwYXVzZX1cbiAgICAgICAgICAgICAgICBzdG9yeT17c3Rvcmllc1tjdXJyZW50SWRdfVxuICAgICAgICAgICAgICAgIGdldFZpZGVvRHVyYXRpb249e2dldFZpZGVvRHVyYXRpb259XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLm92ZXJsYXl9PlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6ICc1MCUnLCB6SW5kZXg6IDk5OSB9fSBvblRvdWNoU3RhcnQ9e2RlYm91bmNlUGF1c2V9IG9uVG91Y2hFbmQ9e2UgPT4gbW91c2VVcChlLCAncHJldmlvdXMnKX0gb25Nb3VzZURvd249e2RlYm91bmNlUGF1c2V9IG9uTW91c2VVcD17KGUpID0+IG1vdXNlVXAoZSwgJ3ByZXZpb3VzJyl9IC8+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyB3aWR0aDogJzUwJScsIHpJbmRleDogOTk5IH19IG9uVG91Y2hTdGFydD17ZGVib3VuY2VQYXVzZX0gb25Ub3VjaEVuZD17ZSA9PiBtb3VzZVVwKGUsICduZXh0Jyl9IG9uTW91c2VEb3duPXtkZWJvdW5jZVBhdXNlfSBvbk1vdXNlVXA9eyhlKSA9PiBtb3VzZVVwKGUsICduZXh0Jyl9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gICAgY29udGFpbmVyOiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjMTExJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuICAgIG92ZXJsYXk6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGhlaWdodDogJ2luaGVyaXQnLFxuICAgICAgICB3aWR0aDogJ2luaGVyaXQnLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCdcbiAgICB9XG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHQsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU3RvcnlQcm9wcywgR2xvYmFsQ3R4IH0gZnJvbSBcIi4vLi4vaW50ZXJmYWNlc1wiO1xuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi9IZWFkZXJcIjtcbmltcG9ydCBTZWVNb3JlIGZyb20gXCIuL1NlZU1vcmVcIjtcbmltcG9ydCBnbG9iYWxTdHlsZSBmcm9tICcuLy4uL3N0eWxlcy5jc3MnXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tIFwiLi8uLi9jb250ZXh0L0dsb2JhbFwiO1xuXG5jb25zdCBTdG9yeSA9IChwcm9wczogU3RvcnlQcm9wcykgPT4ge1xuXHRjb25zdCBbbG9hZGVkLCBzZXRMb2FkZWRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuXHRjb25zdCBbc2hvd01vcmUsIHNldFNob3dNb3JlXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcblxuXHRjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGxvYWRlciwgaGVhZGVyLCBzdG9yeVN0eWxlcyB9ID0gdXNlQ29udGV4dDxHbG9iYWxDdHg+KFxuXHRcdEdsb2JhbENvbnRleHRcblx0KTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdHNldFNob3dNb3JlKGZhbHNlKVxuXHRcdGlmICh0eXBlb2YgcHJvcHMuc3RvcnkgPT09ICdvYmplY3QnICYmIHByb3BzLnN0b3J5LmNvbnRlbnQpIHtcblx0XHRcdHNldExvYWRlZCh0cnVlKVxuXHRcdFx0cHJvcHMuYWN0aW9uKCdwbGF5JywgdHJ1ZSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0c2V0TG9hZGVkKGZhbHNlKVxuXHRcdFx0cHJvcHMuYWN0aW9uKFwicGF1c2VcIiwgdHJ1ZSk7XG5cdFx0XHR2aWQuY3VycmVudCAmJlxuXHRcdFx0XHR2aWQuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwid2FpdGluZ1wiLCAoKSA9PiB7XG5cdFx0XHRcdFx0cHJvcHMuYWN0aW9uKFwicGF1c2VcIiwgdHJ1ZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0dmlkLmN1cnJlbnQgJiZcblx0XHRcdFx0dmlkLmN1cnJlbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBsYXlpbmdcIiwgKCkgPT4ge1xuXHRcdFx0XHRcdHByb3BzLmFjdGlvbihcInBsYXlcIiwgdHJ1ZSk7XG5cdFx0XHRcdH0pO1xuXHRcdH1cblx0fSwgW3Byb3BzLnN0b3J5XSk7XG5cblx0bGV0IHZpZCA9IHVzZVJlZjxIVE1MVmlkZW9FbGVtZW50PihudWxsKTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGlmICh2aWQuY3VycmVudCkge1xuXHRcdFx0aWYgKHByb3BzLnBsYXlTdGF0ZSkge1xuXHRcdFx0XHR2aWQuY3VycmVudC5wYXVzZSgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmlkLmN1cnJlbnQucGxheSgpLmNhdGNoKGUgPT4gY29uc29sZS5sb2coZSkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwgW3Byb3BzLnBsYXlTdGF0ZV0pO1xuXG5cdGNvbnN0IHRvZ2dsZU1vcmUgPSAoc2hvdzogYm9vbGVhbikgPT4ge1xuXHRcdHNldFNob3dNb3JlKHNob3cpXG5cdFx0cHJvcHMuYWN0aW9uKHNob3cgPyAncGF1c2UnIDogJ3BsYXknKVxuXHR9O1xuXG5cdGNvbnN0IGltYWdlTG9hZGVkID0gKCkgPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRzZXRMb2FkZWQodHJ1ZSk7XG5cdFx0XHRwcm9wcy5hY3Rpb24oXCJwbGF5XCIsIHRydWUpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUubG9nKGUpO1xuXHRcdH1cblx0fTtcblxuXHRjb25zdCB2aWRlb0xvYWRlZCA9ICgpID0+IHtcblx0XHR0cnkge1xuXHRcdFx0cHJvcHMuZ2V0VmlkZW9EdXJhdGlvbih2aWQuY3VycmVudC5kdXJhdGlvbik7XG5cdFx0XHR2aWQuY3VycmVudCAmJlxuXHRcdFx0XHR2aWQuY3VycmVudFxuXHRcdFx0XHRcdC5wbGF5KClcblx0XHRcdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0XHRpbWFnZUxvYWRlZCgpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LmNhdGNoKGUgPT4ge1xuXHRcdFx0XHRcdFx0cHJvcHMuYWN0aW9uKFwicGF1c2VcIik7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhlKTtcblx0XHRcdFx0XHR9KTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhlKTtcblx0XHR9XG5cdH07XG5cblx0Y29uc3QgZ2V0U3RvcnlDb250ZW50ID0gKCkgPT4ge1xuXHRcdGxldCBJbm5lckNvbnRlbnQgPSB0eXBlb2YgcHJvcHMuc3RvcnkgPT09IFwib2JqZWN0XCIgJiYgcHJvcHMuc3RvcnkuY29udGVudFxuXHRcdGlmIChJbm5lckNvbnRlbnQpIHtcblx0XHRcdHJldHVybiA8SW5uZXJDb250ZW50IGFjdGlvbj17cHJvcHMuYWN0aW9ufSBpc1BhdXNlZD17cHJvcHMucGxheVN0YXRlfSAvPlxuXHRcdH0gZWxzZSB7XG5cdFx0XHRsZXQgc291cmNlID1cblx0XHRcdFx0dHlwZW9mIHByb3BzLnN0b3J5ID09PSBcIm9iamVjdFwiID8gcHJvcHMuc3RvcnkudXJsIDogcHJvcHMuc3Rvcnk7XG5cdFx0XHRsZXQgc3RvcnlDb250ZW50U3R5bGVzID1cblx0XHRcdFx0KHR5cGVvZiBwcm9wcy5zdG9yeSA9PT0gXCJvYmplY3RcIiAmJiBwcm9wcy5zdG9yeS5zdHlsZXMpIHx8XG5cdFx0XHRcdHN0b3J5U3R5bGVzIHx8XG5cdFx0XHRcdHN0eWxlcy5zdG9yeUNvbnRlbnQ7XG5cdFx0XHRsZXQgdHlwZSA9XG5cdFx0XHRcdHR5cGVvZiBwcm9wcy5zdG9yeSA9PT0gXCJvYmplY3RcIiAmJiBwcm9wcy5zdG9yeS50eXBlID09PSBcInZpZGVvXCJcblx0XHRcdFx0XHQ/IFwidmlkZW9cIlxuXHRcdFx0XHRcdDogXCJpbWFnZVwiO1xuXHRcdFx0cmV0dXJuIHR5cGUgPT09IFwiaW1hZ2VcIiA/IChcblx0XHRcdFx0PGltZyBzdHlsZT17c3RvcnlDb250ZW50U3R5bGVzfSBzcmM9e3NvdXJjZX0gb25Mb2FkPXtpbWFnZUxvYWRlZH0gLz5cblx0XHRcdCkgOiB0eXBlID09PSBcInZpZGVvXCIgPyAoXG5cdFx0XHRcdDx2aWRlb1xuXHRcdFx0XHRcdHJlZj17dmlkfVxuXHRcdFx0XHRcdHN0eWxlPXtzdG9yeUNvbnRlbnRTdHlsZXN9XG5cdFx0XHRcdFx0c3JjPXtzb3VyY2V9XG5cdFx0XHRcdFx0Y29udHJvbHM9e2ZhbHNlfVxuXHRcdFx0XHRcdG9uTG9hZGVkRGF0YT17dmlkZW9Mb2FkZWR9XG5cdFx0XHRcdFx0YXV0b1BsYXlcblx0XHRcdFx0XHRwbGF5c0lubGluZVxuXHRcdFx0XHQvPlxuXHRcdFx0KSA6IG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cdGxldCBpc0hlYWRlciA9IHR5cGVvZiBwcm9wcy5zdG9yeSA9PT0gXCJvYmplY3RcIiAmJiBwcm9wcy5zdG9yeS5oZWFkZXI7XG5cdHJldHVybiAoXG5cdFx0PGRpdiBzdHlsZT17eyAuLi5zdHlsZXMuc3RvcnksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfX0+XG5cdFx0XHR7Z2V0U3RvcnlDb250ZW50KCl9XG5cdFx0XHR7aXNIZWFkZXIgJiYgKFxuXHRcdFx0XHQ8ZGl2IHN0eWxlPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIGxlZnQ6IDEyLCB0b3A6IDIwLCB6SW5kZXg6IDEwMDAsIHdpZHRoOiBcImNhbGMoMTAwJSAtIDI0cHgpXCIgfX0+XG5cdFx0XHRcdFx0e3R5cGVvZiBwcm9wcy5zdG9yeSA9PT0gXCJvYmplY3RcIiA/IChcblx0XHRcdFx0XHRcdGhlYWRlciA/IChcblx0XHRcdFx0XHRcdFx0aGVhZGVyKHByb3BzLnN0b3J5LmhlYWRlcilcblx0XHRcdFx0XHRcdCkgOiAoXG5cdFx0XHRcdFx0XHRcdFx0PEhlYWRlclxuXHRcdFx0XHRcdFx0XHRcdFx0aGVhZGluZz17cHJvcHMuc3RvcnkuaGVhZGVyLmhlYWRpbmd9XG5cdFx0XHRcdFx0XHRcdFx0XHRzdWJoZWFkaW5nPXtwcm9wcy5zdG9yeS5oZWFkZXIuc3ViaGVhZGluZ31cblx0XHRcdFx0XHRcdFx0XHRcdHByb2ZpbGVJbWFnZT17cHJvcHMuc3RvcnkuaGVhZGVyLnByb2ZpbGVJbWFnZX1cblx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSA6IG51bGx9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0KX1cblx0XHRcdHshbG9hZGVkICYmIChcblx0XHRcdFx0PGRpdlxuXHRcdFx0XHRcdHN0eWxlPXt7XG5cdFx0XHRcdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG5cdFx0XHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdFx0YmFja2dyb3VuZDogXCJyZ2JhKDAsIDAsIDAsIDAuOSlcIixcblx0XHRcdFx0XHRcdHpJbmRleDogOSxcblx0XHRcdFx0XHRcdGRpc3BsYXk6IFwiZmxleFwiLFxuXHRcdFx0XHRcdFx0anVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG5cdFx0XHRcdFx0XHRhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuXHRcdFx0XHRcdFx0Y29sb3I6IFwiI2NjY1wiXG5cdFx0XHRcdFx0fX1cblx0XHRcdFx0PlxuXHRcdFx0XHRcdHtsb2FkZXIgfHwgPGRpdiBjbGFzc05hbWU9e2dsb2JhbFN0eWxlLnNwaW5uZXJ9IC8+fVxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdCl9XG5cdFx0XHR7dHlwZW9mIHByb3BzLnN0b3J5ID09PSBcIm9iamVjdFwiICYmIHByb3BzLnN0b3J5LnNlZU1vcmUgJiYgKFxuXHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0c3R5bGU9e3tcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG5cdFx0XHRcdFx0XHRtYXJnaW46IFwiYXV0b1wiLFxuXHRcdFx0XHRcdFx0Ym90dG9tOiBzaG93TW9yZSA/ICd1bnNldCcgOiAwLFxuXHRcdFx0XHRcdFx0ekluZGV4OiA5OTk5LFxuXHRcdFx0XHRcdFx0d2lkdGg6IFwiMTAwJVwiLFxuXHRcdFx0XHRcdFx0aGVpZ2h0OiBzaG93TW9yZSA/ICcxMDAlJyA6ICdhdXRvJ1xuXHRcdFx0XHRcdH19XG5cdFx0XHRcdD5cblx0XHRcdFx0XHQ8U2VlTW9yZVxuXHRcdFx0XHRcdFx0YWN0aW9uPXtwcm9wcy5hY3Rpb259XG5cdFx0XHRcdFx0XHR0b2dnbGVNb3JlPXt0b2dnbGVNb3JlfVxuXHRcdFx0XHRcdFx0c2hvd0NvbnRlbnQ9e3Nob3dNb3JlfVxuXHRcdFx0XHRcdFx0c2VlTW9yZUNvbnRlbnQ9e3Byb3BzLnN0b3J5LnNlZU1vcmV9XG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQpfVxuXHRcdDwvZGl2PlxuXHQpO1xufTtcblxuY29uc3Qgc3R5bGVzID0ge1xuXHRzdG9yeToge1xuXHRcdGRpc3BsYXk6IFwiZmxleFwiLFxuXHRcdHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG5cdFx0b3ZlcmZsb3c6IFwiaGlkZGVuXCJcblx0fSxcblx0c3RvcnlDb250ZW50OiB7XG5cdFx0d2lkdGg6IFwiYXV0b1wiLFxuXHRcdG1heFdpZHRoOiBcIjEwMCVcIixcblx0XHRtYXhIZWlnaHQ6IFwiMTAwJVwiLFxuXHRcdG1hcmdpbjogXCJhdXRvXCJcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU3Rvcnk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBIZWFkZXJQcm9wcyB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcydcblxuY29uc3QgSGVhZGVyID0gKHsgcHJvZmlsZUltYWdlLCBoZWFkaW5nLCBzdWJoZWFkaW5nIH06IEhlYWRlclByb3BzKSA9PlxuICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5tYWlufT5cbiAgICAgICAge3Byb2ZpbGVJbWFnZSAmJiA8aW1nIHN0eWxlPXtzdHlsZXMuaW1nfSBzcmM9e3Byb2ZpbGVJbWFnZX0gLz59XG4gICAgICAgIDxzcGFuIHN0eWxlPXtzdHlsZXMudGV4dH0+XG4gICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmhlYWRpbmd9PntoZWFkaW5nfTwvcD5cbiAgICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuc3ViaGVhZGluZ30+e3N1YmhlYWRpbmd9PC9wPlxuICAgICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgICBtYWluOiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuICAgIGltZzoge1xuICAgICAgICB3aWR0aDogNDAsXG4gICAgICAgIGhlaWdodDogNDAsXG4gICAgICAgIGJvcmRlclJhZGl1czogNDAsXG4gICAgICAgIG1hcmdpblJpZ2h0OiAxMCxcbiAgICAgICAgZmlsdGVyOiAnZHJvcC1zaGFkb3coMCAwcHggMnB4IHJnYmEoMCwgMCwgMCwgMC41KSknLFxuICAgICAgICBib3JkZXI6ICcycHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpJ1xuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICBmaWx0ZXI6ICdkcm9wLXNoYWRvdygwIDBweCAzcHggcmdiYSgwLCAwLCAwLCAwLjkpKSdcbiAgICB9LFxuICAgIGhlYWRpbmc6IHtcbiAgICAgICAgZm9udFNpemU6ICcxcmVtJyxcbiAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOSknLFxuICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogMlxuICAgIH0sXG4gICAgc3ViaGVhZGluZzoge1xuICAgICAgICBmb250U2l6ZTogJzAuNnJlbScsXG4gICAgICAgIGNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpJyxcbiAgICAgICAgbWFyZ2luOiAwXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXIiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBTZWVNb3JlUHJvcHMgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnXG4vLyBpbXBvcnQgdXAgZnJvbSAnLi8uLi91cC5wbmcnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlZU1vcmUocHJvcHM6IFNlZU1vcmVQcm9wcykge1xuICAgIGNvbnN0IFNlZU1vcmVDb250ZW50ID0gcHJvcHMuc2VlTW9yZUNvbnRlbnRcbiAgICByZXR1cm4gKFxuICAgICAgICBwcm9wcy5zaG93Q29udGVudFxuICAgICAgICAgICAgPyA8ZGl2IHN0eWxlPXtzdHlsZXMuc2VlTW9yZUV4cGFuZGVkfT5cbiAgICAgICAgICAgICAgICA8U2VlTW9yZUNvbnRlbnQgY2xvc2U9eygpID0+IHByb3BzLnRvZ2dsZU1vcmUoZmFsc2UpfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA6IDxkaXYgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIHByb3BzLnRvZ2dsZU1vcmUodHJ1ZSlcbiAgICAgICAgICAgIH19IHN0eWxlPXtzdHlsZXMuc2VlTW9yZX0+XG4gICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3N0eWxlcy5zZWVNb3JlSWNvbn0+4oyDPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXtzdHlsZXMuc2VlTW9yZVRleHR9PlNlZSBtb3JlPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgKVxufVxuXG5jb25zdCBzdHlsZXM6IGFueSA9IHtcbiAgICBzZWVNb3JlOiB7XG4gICAgICAgIGhlaWdodDogXCIxMHZoXCIsXG4gICAgICAgIGJhY2tncm91bmQ6IFwibGluZWFyLWdyYWRpZW50KHJnYmEoMCwgMCwgMCwgMCksIHJnYmEoMCwgMCwgMCwgMC4yKSlcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiZmxleC1lbmRcIixcbiAgICAgICAgYm90dG9tOiAwXG4gICAgfSxcbiAgICBzZWVNb3JlRXhwYW5kZWQ6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICB6SW5kZXg6IDk5OTk5XG4gICAgfSxcbiAgICBzZWVNb3JlVGV4dDoge1xuICAgICAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IFwiMC4xZW1cIixcbiAgICAgICAgbWFyZ2luQm90dG9tOiBcIjIuMnZoXCIsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06IFwiY2FwaXRhbGl6ZVwiLFxuICAgICAgICBvcGFjaXR5OiBcIjFcIixcbiAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgdHJhbnNpdGlvbjogXCJvcGFjaXR5IDMwMG1zIGVhc2UtaW4tb3V0XCJcbiAgICB9LFxuICAgIHNlZU1vcmVJY29uOiB7XG4gICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICAgICAgbGV0dGVyU3BhY2luZzogXCIwLjJlbVwiLFxuICAgICAgICBtYXJnaW5Cb3R0b206IFwiMC40dmhcIixcbiAgICAgICAgb3BhY2l0eTogXCIxXCIsXG4gICAgICAgIGZpbHRlcjogXCJkcm9wLXNoYWRvdygwIDAgNXB4IGJsYWNrKVwiLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiBcImNhcGl0YWxpemVcIixcbiAgICAgICAgdHJhbnNpdGlvbjogXCJvcGFjaXR5IDMwMG1zIGVhc2UtaW4tb3V0XCJcbiAgICB9LFxuICAgIHNlZU1vcmVDbG9zZToge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICBmaWx0ZXI6IFwiZHJvcC1zaGFkb3coMCAzcHggMnB4ICNjY2MpXCIsXG4gICAgICAgIHJpZ2h0OiBcIjAuNXJlbVwiLFxuICAgICAgICB0b3A6IFwiMC41cmVtXCIsXG4gICAgICAgIGZvbnRTaXplOiBcIjEuNXJlbVwiLFxuICAgICAgICBvcGFjaXR5OiBcIjAuN1wiLFxuICAgICAgICBwYWRkaW5nOiBcIjFyZW1cIlxuICAgIH1cbn0iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9AdGVhbXN1cGVyY2VsbC90eXBpbmdzLWZvci1jc3MtbW9kdWxlcy1sb2FkZXIvc3JjL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTUtMiEuL3N0eWxlcy5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuXzFDSzdGSFZ3aGlPbnVDaVpKd2lQcTEge1xcblxcdHdpZHRoOiA0MHB4O1xcblxcdGhlaWdodDogNDBweDtcXG5cXHRtYXJnaW46IDEwMHB4IGF1dG87XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG5cXG5cXHRib3JkZXItcmFkaXVzOiAxMDAlO1xcblxcdC13ZWJraXQtYW5pbWF0aW9uOiBfMWhFUTJWeklrVGlaLTlqWm9MSTNKQyAxcyBpbmZpbml0ZSBlYXNlLWluLW91dDtcXG5cXHRhbmltYXRpb246IF8xaEVRMlZ6SWtUaVotOWpab0xJM0pDIDFzIGluZmluaXRlIGVhc2UtaW4tb3V0O1xcbn1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgXzFoRVEyVnpJa1RpWi05alpvTEkzSkMge1xcblxcdDAlIHtcXG5cXHRcXHQtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuXFx0fVxcblxcdDEwMCUge1xcblxcdFxcdC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG5cXHRcXHRvcGFjaXR5OiAwO1xcblxcdH1cXG59XFxuXFxuQGtleWZyYW1lcyBfMWhFUTJWeklrVGlaLTlqWm9MSTNKQyB7XFxuXFx0MCUge1xcblxcdFxcdC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG5cXHRcXHR0cmFuc2Zvcm06IHNjYWxlKDApO1xcblxcdH1cXG5cXHQxMDAlIHtcXG5cXHRcXHQtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuXFx0XFx0dHJhbnNmb3JtOiBzY2FsZSgxKTtcXG5cXHRcXHRvcGFjaXR5OiAwO1xcblxcdH1cXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcInNwaW5uZXJcIjogXCJfMUNLN0ZIVndoaU9udUNpWkp3aVBxMVwiLFxuXHRcInNrLXNjYWxlb3V0XCI6IFwiXzFoRVEyVnpJa1RpWi05alpvTEkzSkNcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9ncmVzcyBmcm9tICcuL1Byb2dyZXNzJ1xuaW1wb3J0IHsgUHJvZ3Jlc3NDb250ZXh0LCBHbG9iYWxDdHggfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgUHJvZ3Jlc3NDdHggZnJvbSAnLi8uLi9jb250ZXh0L1Byb2dyZXNzJ1xuaW1wb3J0IEdsb2JhbENvbnRleHQgZnJvbSAnLi8uLi9jb250ZXh0L0dsb2JhbCdcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICAgIGNvbnN0IFtjb3VudCwgc2V0Q291bnRdID0gdXNlU3RhdGU8bnVtYmVyPigwKVxuICAgIGNvbnN0IHsgY3VycmVudElkLCBuZXh0LCB2aWRlb0R1cmF0aW9uLCBwYXVzZSB9ID0gdXNlQ29udGV4dDxQcm9ncmVzc0NvbnRleHQ+KFByb2dyZXNzQ3R4KVxuICAgIGNvbnN0IHsgc3RvcmllcywgZGVmYXVsdEludGVydmFsLCBvblN0b3J5RW5kLCBvblN0b3J5U3RhcnQsIG9uQWxsU3Rvcmllc0VuZCB9ID0gdXNlQ29udGV4dDxHbG9iYWxDdHg+KEdsb2JhbENvbnRleHQpXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRDb3VudCgwKVxuICAgIH0sIFtjdXJyZW50SWQsIHN0b3JpZXNdKVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFwYXVzZSkge1xuICAgICAgICAgICAgYW5pbWF0aW9uRnJhbWVJZC5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGluY3JlbWVudENvdW50KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZUlkLmN1cnJlbnQpXG4gICAgICAgIH1cbiAgICB9LCBbY3VycmVudElkLCBwYXVzZV0pXG5cbiAgICBsZXQgYW5pbWF0aW9uRnJhbWVJZCA9IHVzZVJlZjxudW1iZXI+KClcblxuICAgIGxldCBjb3VudENvcHkgPSBjb3VudDtcbiAgICBjb25zdCBpbmNyZW1lbnRDb3VudCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGNvdW50Q29weSA9PT0gMCkgc3RvcnlTdGFydENhbGxiYWNrKClcbiAgICAgICAgc2V0Q291bnQoKGNvdW50OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGludGVydmFsID0gZ2V0Q3VycmVudEludGVydmFsKClcbiAgICAgICAgICAgIGNvdW50Q29weSA9IGNvdW50ICsgKDEwMCAvICgoaW50ZXJ2YWwgLyAxMDAwKSAqIDYwKSlcbiAgICAgICAgICAgIHJldHVybiBjb3VudCArICgxMDAgLyAoKGludGVydmFsIC8gMTAwMCkgKiA2MCkpXG4gICAgICAgIH0pXG4gICAgICAgIGlmIChjb3VudENvcHkgPCAxMDApIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbkZyYW1lSWQuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShpbmNyZW1lbnRDb3VudClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0b3J5RW5kQ2FsbGJhY2soKVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRJZCA9PT0gc3Rvcmllcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgYWxsU3Rvcmllc0VuZENhbGxiYWNrKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lSWQuY3VycmVudClcbiAgICAgICAgICAgIG5leHQoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcnlTdGFydENhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICBvblN0b3J5U3RhcnQgJiYgb25TdG9yeVN0YXJ0KGN1cnJlbnRJZCwgc3Rvcmllc1tjdXJyZW50SWRdKVxuICAgIH1cblxuICAgIGNvbnN0IHN0b3J5RW5kQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgIG9uU3RvcnlFbmQgJiYgb25TdG9yeUVuZChjdXJyZW50SWQsIHN0b3JpZXNbY3VycmVudElkXSlcbiAgICB9XG5cbiAgICBjb25zdCBhbGxTdG9yaWVzRW5kQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgIG9uQWxsU3Rvcmllc0VuZCAmJiBvbkFsbFN0b3JpZXNFbmQoY3VycmVudElkLCBzdG9yaWVzKVxuICAgIH1cblxuICAgIGNvbnN0IGdldEN1cnJlbnRJbnRlcnZhbCA9ICgpID0+IHtcbiAgICAgICAgaWYgKHN0b3JpZXNbY3VycmVudElkXS50eXBlID09PSAndmlkZW8nKSByZXR1cm4gdmlkZW9EdXJhdGlvblxuICAgICAgICBpZiAodHlwZW9mIHN0b3JpZXNbY3VycmVudElkXS5kdXJhdGlvbiA9PT0gJ251bWJlcicpIHJldHVybiBzdG9yaWVzW2N1cnJlbnRJZF0uZHVyYXRpb25cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRJbnRlcnZhbFxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5wcm9ncmVzc0Fycn0+XG4gICAgICAgICAgICB7c3Rvcmllcy5tYXAoKF8sIGkpID0+XG4gICAgICAgICAgICAgICAgPFByb2dyZXNzXG4gICAgICAgICAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgICAgICAgICAgY291bnQ9e2NvdW50fVxuICAgICAgICAgICAgICAgICAgICB3aWR0aD17MSAvIHN0b3JpZXMubGVuZ3RofVxuICAgICAgICAgICAgICAgICAgICBhY3RpdmU9e2kgPT09IGN1cnJlbnRJZCA/IDEgOiAoaSA8IGN1cnJlbnRJZCA/IDIgOiAwKX1cbiAgICAgICAgICAgICAgICAvPil9XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICAgIHByb2dyZXNzQXJyOiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICBmbGV4V3JhcDogJ3JvdycsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB3aWR0aDogJzk4JScsXG4gICAgICAgIHBhZGRpbmc6IDUsXG4gICAgICAgIHBhZGRpbmdUb3A6IDcsXG4gICAgICAgIGFsaWduU2VsZjogJ2NlbnRlcicsXG4gICAgICAgIHpJbmRleDogOTksXG4gICAgICAgIGZpbHRlcjogJ2Ryb3Atc2hhZG93KDAgMXB4IDhweCAjMjIyKSdcbiAgICB9XG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFByb2dyZXNzUHJvcHMsIFByb2dyZXNzQ29udGV4dCB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCBQcm9ncmVzc1dyYXBwZXIgZnJvbSAnLi9Qcm9ncmVzc1dyYXBwZXInXG5pbXBvcnQgUHJvZ3Jlc3NDdHggZnJvbSAnLi8uLi9jb250ZXh0L1Byb2dyZXNzJ1xuXG5leHBvcnQgZGVmYXVsdCAocHJvcHM6IFByb2dyZXNzUHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGJ1ZmZlckFjdGlvbiwgcGF1c2UgfSA9IHVzZUNvbnRleHQ8UHJvZ3Jlc3NDb250ZXh0PihQcm9ncmVzc0N0eClcblxuICAgIGNvbnN0IGdldFByb2dyZXNzU3R5bGUgPSAoeyBhY3RpdmUgfSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGFjdGl2ZSkge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHdpZHRoOiAnMTAwJScgfVxuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHRyYW5zZm9ybTogYHNjYWxlWCgke3Byb3BzLmNvdW50IC8gMTAwfSlgIH1cbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4geyB3aWR0aDogMCB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHdpZHRoOiAwIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHsgd2lkdGgsIGFjdGl2ZSB9ID0gcHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgICA8UHJvZ3Jlc3NXcmFwcGVyIHdpZHRoPXt3aWR0aH0gcGF1c2U9e3BhdXNlfSBidWZmZXJBY3Rpb249e2J1ZmZlckFjdGlvbn0+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgLi4uZ2V0UHJvZ3Jlc3NTdHlsZSh7IGFjdGl2ZSB9KSwgLi4uc3R5bGVzLmlubmVyIH19IC8+XG4gICAgICAgIDwvUHJvZ3Jlc3NXcmFwcGVyPlxuICAgIClcbn1cblxuY29uc3Qgc3R5bGVzOiBhbnkgPSB7XG4gICAgaW5uZXI6IHtcbiAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAyLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXIgbGVmdCcsXG5cbiAgICAgICAgV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAgICAgTW96QmFja2ZhY2VWaXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAgICAgbXNCYWNrZmFjZVZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgICBiYWNrZmFjZVZpc2liaWxpdHk6ICdoaWRkZW4nLFxuXG4gICAgICAgIFdlYmtpdFBlcnNwZWN0aXZlOiAxMDAwLFxuICAgICAgICBNb3pQZXJzcGVjdGl2ZTogMTAwMCxcbiAgICAgICAgbXNQZXJzcGVjdGl2ZTogMTAwMCxcbiAgICAgICAgcGVyc3BlY3RpdmU6IDEwMDBcbiAgICB9XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgUHJvZ3Jlc3NXcmFwcGVyUHJvcHMgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnXG5cbmNvbnN0IFByb2dyZXNzV3JhcHBlciA9IChwcm9wczogUHJvZ3Jlc3NXcmFwcGVyUHJvcHMpID0+IChcbiAgICA8ZGl2IHN0eWxlPXt7IC4uLnN0eWxlcy5wcm9ncmVzcywgLi4uZ2V0UHJvZ3Jlc3NXcmFwcGVyU3R5bGUocHJvcHMpIH19PlxuICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9kaXY+XG4pXG5cbmNvbnN0IGdldFByb2dyZXNzV3JhcHBlclN0eWxlID0gKHsgd2lkdGgsIHBhdXNlLCBidWZmZXJBY3Rpb24gfSkgPT4gKHtcbiAgICB3aWR0aDogYCR7d2lkdGggKiAxMDB9JWAsXG4gICAgb3BhY2l0eTogcGF1c2UgJiYgIWJ1ZmZlckFjdGlvbiA/IDAgOiAxXG59KVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gICAgcHJvZ3Jlc3M6IHtcbiAgICAgICAgaGVpZ2h0OiAyLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnIzU1NScsXG4gICAgICAgIG1hcmdpbjogMixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAyLFxuICAgICAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSA0MDBtcyBlYXNlLWluLW91dCdcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb2dyZXNzV3JhcHBlciJdLCJzb3VyY2VSb290IjoiIn0=